
//@version=9
strategy('MACD', overlay=false, initial_capital=1000, pyramiding=0, commission_type=strategy.commission.percent, commission_value=0.07, default_qty_type=strategy.percent_of_equity, default_qty_value=100, currency=currency.USD)

// FUNCTIONS

Ema(src, p) =>
    ema = 0.
    sf = 2 / (p + 1)
    ema := nz(ema[1] + sf * (src - ema[1]), src)
    ema

Sma(src, p) =>
    a = ta.cum(src)
    (a - a[math.max(p, 0)]) / math.max(p, 0)

Atr(p) =>
    atr = 0.
    Tr = math.max(high - low, math.max(math.abs(high - close[1]), math.abs(low - close[1])))
    atr := nz(atr[1] + (Tr - atr[1]) / p, Tr)
    atr

/// TREND
ribbon_period = input.int(20, 'Period', step=1)

leadLine1 = ta.ema(close, ribbon_period)
leadLine2 = ta.sma(close, ribbon_period)

// p3 = plot(leadLine1, color= #53b987, title="EMA", transp = 50, linewidth = 1)
// p4 = plot(leadLine2, color= #eb4d5c, title="SMA", transp = 50, linewidth = 1)
// fill(p3, p4, transp = 60, color = leadLine1 > leadLine2 ? #53b987 : #eb4d5c)

//Upward Trend
UT = leadLine2 < leadLine1
DT = leadLine2 > leadLine1

// MACD
fast_length = input(title='Fast Length', defval=6)
slow_length = input(title='Slow Length', defval=20)
src = input(title='Source', defval=close)
signal_length = input.int(title='Signal Smoothing', minval=1, maxval=50, defval=15)
sma_source = input(title='Simple MA(Oscillator)', defval=false)
sma_signal = input(title='Simple MA(Signal Line)', defval=false)

// Plot colors
col_grow_above = #26A69A
col_grow_below = #FFCDD2
col_fall_above = #B2DFDB
col_fall_below = #EF5350
col_macd = #0094ff
col_signal = #ff6a00

// Calculating
fast_ma = sma_source ? Sma(src, fast_length) : Ema(src, fast_length)
slow_ma = sma_source ? Sma(src, slow_length) : Ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal ? Sma(macd, signal_length) : Ema(macd, signal_length)
hist = macd - signal

//plot(hist, title="Histogram", style=plot.style_columns, color=(hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below) ), transp=0 )
plot(macd, title='MACD', color=color.new(col_macd, 0))
plot(signal, title='Signal', color=color.new(col_signal, 0))

/// MFI
source = hlc3
length = input.int(14, minval=1)
lower = input.int(10, minval=0, maxval=50)
upper = input.int(80, minval=50, maxval=100)

// DrawMFI_f=input(true, title="Draw MFI?", type=bool)
HighlightBreaches = input(true, title='Highlight Oversold/Overbought?')

// MFI
upper_s = math.sum(volume * (ta.change(source) <= 0 ? 0 : source), length)
lower_s = math.sum(volume * (ta.change(source) >= 0 ? 0 : source), length)
mf = 100.0 - 100.0 / (1.0 + upper_s / lower_s)
mfp = plot(mf, color=color.new(color.gray, 0), linewidth=1)
top = hline(upper, color=color.new(color.gray, 100), linewidth=1, editable=false)
bottom = hline(lower, color=color.new(color.gray, 100), linewidth=1, editable=false)
hline(0, color=color.new(color.black, 100), editable=false)
hline(100, color=color.new(color.black, 100), editable=false)

// Breaches
b_color = mf > upper ? color.new(color.red, 70) : mf < lower ? color.new(color.green, 60) : na
bgcolor(HighlightBreaches ? b_color : na, transp=90)

fill(top, bottom, color=color.new(color.gray, 75))

// TAKE PROFIT AND STOP LOSS
long_tp1_inp = input.float(1, title='Long Take Profit 1 %', step=0.1) / 100
long_tp1_qty = input.int(50, title='Long Take Profit 1 Qty', step=1)

long_trailing = input.float(2.5, title='Trailing Stop Long', step=0.1) / 100

long_take_level_1 = strategy.position_avg_price * (1 + long_tp1_inp)

// Stop Loss
multiplier = input.float(3, 'SL Mutiplier', minval=1, step=0.1)
ATR_period = input.int(15, 'ATR period', minval=1, step=1)

// Strategy
entry_long = ta.crossover(macd, signal) or ta.crossover(mf, lower) and leadLine2 < leadLine1
entry_price_long = ta.valuewhen(entry_long, close, 0)
SL_floating_long = entry_price_long - multiplier * Atr(ATR_period)
exit_long = close < SL_floating_long

///// BACKTEST PERIOD ///////
testStartYear = input(2018, 'Backtest Start Year')
testStartMonth = input(1, 'Backtest Start Month')
testStartDay = input(1, 'Backtest Start Day')
testPeriodStart = timestamp(testStartYear, testStartMonth, testStartDay, 0, 0)

testStopYear = input(9999, 'Backtest Stop Year')
testStopMonth = input(12, 'Backtest Stop Month')
testStopDay = input(31, 'Backtest Stop Day')
testPeriodStop = timestamp(testStopYear, testStopMonth, testStopDay, 0, 0)

testPeriod() =>
    time >= testPeriodStart and time <= testPeriodStop ? true : false

if testPeriod()
    if UT
        strategy.entry('long', strategy.long, when=entry_long == true, comment='Entry Long')
    strategy.exit('TP1', 'long', qty_percent=long_tp1_qty, limit=long_take_level_1)
    strategy.exit('Trail stop', 'long', trail_points=entry_price_long * long_trailing / syminfo.mintick, trail_offset=entry_price_long * long_trailing / syminfo.mintick)
    strategy.close('long', exit_long == true, comment='Exit Long')
